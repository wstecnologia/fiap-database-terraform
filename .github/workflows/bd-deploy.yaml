name: Deploy Infra com Terraform

on:
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      TF_VAR_db_name: ${{ secrets.DB_DATABASE }}
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
      TF_VAR_db_username: ${{ secrets.DB_USER }}
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v3

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}

      - name: Inicializar Terraform
        run: terraform init -input=false

      - name: Importar ou criar DB Subnet Group
        run: |
          EXISTING_SUBNET_GROUP=$(aws rds describe-db-subnet-groups --db-subnet-group-name db-subnet-group --query 'DBSubnetGroups[0].DBSubnetGroupName' --output text)
          if [ "$EXISTING_SUBNET_GROUP" == "db-subnet-group" ]; then
            terraform import aws_db_subnet_group.sg db-subnet-group
          fi

      - name: Importar ou criar Security Group
        run: |
          EXISTING_SG=$(aws ec2 describe-security-groups --filters Name=group-name,Values=db-sg-wstech --query 'SecurityGroups[0].GroupId' --output text)
          if [ "$EXISTING_SG" != "None" ]; then
            terraform import aws_security_group.sg-db $EXISTING_SG
          fi

      - name: Validar Terraform
        run: terraform validate

      - name: Executar Terraform Plan
        id: plan
        run: |
          terraform plan -out=tfplan

      - name: Aplicar Terraform
        run: terraform apply -auto-approve tfplan
